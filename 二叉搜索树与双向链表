输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。

思路：二叉搜索树中序遍历可以变成一个有序的数组，最终返回的双向链表中每一个节点的左指针指向上一个比它小的节点，右指针下一个比它大的节点
1.可以先按中序遍历入栈，再依次出栈改变左右指针

import java.util.Stack;
public class Solution {
    public TreeNode Convert(TreeNode pRootOfTree) {
        helper(pRootOfTree);
        TreeNode tail = stack.pop();
        tail.left = stack.peek();
        TreeNode tail1 = tail;
        TreeNode head1 = null;
        while(!stack.empty()){
            TreeNode temp = stack.pop();
            if(stack.empty()) {//如果没有这一步temp.left = stack.peek()会抛出异常
                stack.push(tail1);
                head1 = temp;
            }
            temp.left = stack.peek();
            temp.right = tail;
            tail = temp;
            if(stack.peek() == tail1)//如果没有这段无法跳出循环
                stack.pop();
        }
        tail1.right = head1;
        head1.left = tail1;
        return pRootOfTree;
    }
    private void helper(TreeNode pRootOfTree){
        if(pRootOfTree == null)
            return;
        helper(pRootOfTree.left);
        stack.push(pRootOfTree);
        helper(pRootOfTree.right);
    }
    private Stack<TreeNode> stack = new Stack<TreeNode>();
}

还是不行，我不懂为什么

答案C++

class Solution {
public:    TreeNode* Convert(TreeNode* pRootOfTree){
                if(pRootOfTree == nullptr) return nullptr;        
                TreeNode* pre = nullptr;                 
                convertHelper(pRootOfTree, pre);                 
                TreeNode* res = pRootOfTree;        
                while(res ->left)            
                res = res ->left;        
                return res;    
            }         
            void convertHelper(TreeNode* cur, TreeNode*& pre){
                if(cur == nullptr)
                    return;                 
                convertHelper(cur ->left, pre);                 
                cur ->left = pre;        
                if(pre) 
                    pre ->right = cur;        
                pre = cur;                 
                convertHelper(cur ->right, pre);                               
            }
};
