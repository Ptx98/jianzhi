输入一个整数数组，实现一个函数来调整该数组中数字的顺序，
使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，
并保证奇数和奇数，偶数和偶数之间的相对位置不变。

思路：遍历两次数组，第一次把奇数和偶数分别入栈；第二次从数组尾遍历，偶数栈先出栈，奇数栈后出栈

C++:
class Solution {
public:
    void reOrderArray(vector<int> &array) {
        stack<int> odd,even;
        int len = array.size();
        for(int i = 0; i <len; i++){
            if(array[i]%2 == 0)
                even.push(array[i]);
            else
                odd.push(array[i]);
        }
        for(int i = len - 1; i >= 0; i--){
            if(!even.empty()){
                array[i] = even.top();
                even.pop();
            }
            else{
                array[i] = odd.top();
                odd.pop();
            }
        }
    }
};



Java:
import java.util.*;
public class Solution {
    public void reOrderArray(int [] array) {
        Stack<Integer> odd = new Stack<Integer>();
        Stack<Integer> even = new Stack<Integer>();
        int len = array.length;
        for(int i = 0; i <len; i++){
            if(array[i]%2 == 0)
                even.push(array[i]);
            else
                odd.push(array[i]);
        }
        for(int i = len-1; i >= 0; i--){
            if(!even.empty()){
                array[i] = even.pop();
            }
            else{
                array[i] = odd.pop();
            }
            
        }
    }
}
