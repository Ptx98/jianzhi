输入一个链表，按链表从尾到头的顺序返回一个ArrayList。

用stack
c++:https://www.cnblogs.com/magisk/p/9193351.html
/**
*  struct ListNode {
*        int val;
*        struct ListNode *next;
*        ListNode(int x) :
*              val(x), next(NULL) {
*        }
*  };
*/
#include<stack>
class Solution {
public:
    vector<int> printListFromTailToHead(ListNode* head) {
        vector<int> ans;
        stack<int> temp;
        while(head)
        {
            temp.push(head->val);
            head = head->next;
        }
        while(temp.empty() == false)
        {
            int i = temp.top();
            temp.pop();
            ans.push_back(i);
        }
        return ans;
    }
};



java:https://www.runoob.com/java/java-stack-class.html

一、非递归 
1. 分析 listNode 是链表，只能从头遍历到尾，但是输出却要求从尾到头，这是典型的"先进先出"，我们可以想到栈！
LinkedList 中有个方法是 add(index,value)，可以指定 index 位置插入 value 值
所以我们在遍历 listNode 的同时将每个遇到的值插入到 list 的 0 位置，最后输出 listNode 即可得到逆序链表 
2. 代码 
import java.util.*;
public class Solution {
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
        List<Integer> list = new ArrayList<>();
        ListNode tmp = listNode;
        while(tmp!=null){
            list.add(0,tmp.val);
            tmp = tmp.next;
        }
        return list;
    }
}
二、递归 
1. 分析 既然非递归都实现了，那么我们也可以利用递归，借助系统的"栈"帮忙打印 
2. 代码 
import java.util.*;
public class Solution {
    ArrayList<Integer> list = new ArrayList();
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
        if(listNode!=null){
            printListFromTailToHead(listNode.next);
            list.add(listNode.val);
        }
        return list;
    }
}
